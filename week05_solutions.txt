###week05_ex1_start_py
import matplotlib.pyplot as plt
import numpy as np

# Create an x-axis with 1000 points
x = np.linspace(-np.pi, np.pi, 1000)

# Evaluate the functions at all these points
f1 = np.sin(x)
f2 = np.tan(0.49 * x)
f3 = np.sin(x) * np.cos(2*x)

# Create a figure with 3 subplots
fig, ax = plt.subplots(1, 3, figsize=(10, 4))

# Plot each function in a different subplot
ax[0].plot(x, f1, 'r-.')
ax[1].plot(x, f2, 'g:')
ax[2].plot(x, f3, 'b--')

# Store y-axis label for each plot
y_labels = [r'$f_1(x)$', r'$f_2(x)$', r'$f_3(x)$']

# Set all 3 properties for the 3 plots
for i in range(3):
    ax[i].set_xlim([-np.pi, np.pi])
    ax[i].set_xlabel(r'$x$', fontsize=14)
    ax[i].set_ylabel(y_labels[i], fontsize=14)

# Make some space
plt.subplots_adjust(hspace=0.5, wspace=0.5)

# Display the plot
plt.show()
###week05_ex1_end

###week05_ex2_start_py
import matplotlib.pyplot as plt
import numpy as np
import math

# Define a function for the truncated Maclaurin series
def trunc_cos(x, n):
    '''
    Return the truncated Maclaurin series for
    cos(x), with terms up until order n.
    '''
    cos_series = 0
    for k in range(n//2 + 1):
        # Add each term of the series up to nth order
        cos_series += (-1)**k * x**(2*k) / math.factorial(2*k)
    
    return cos_series


# Create an x-axis with 1000 points
x = np.linspace(-np.pi, np.pi, 1000)

# Create a figure
fig, ax = plt.subplots()

# Plot the requested functions
ax.plot(x, np.cos(x), 'k-', label=r'$\cos(x)$')
ax.plot(x, trunc_cos(x, 2), 'r--', label=r'Order 2')
ax.plot(x, trunc_cos(x, 4), 'g-.', label=r'Order 4')
ax.plot(x, trunc_cos(x, 6), 'b:', label=r'Order 6')

# Set axis properties
ax.set_xlim([-np.pi, np.pi])
ax.set_ylim([-1.5, 1.5])
ax.set_xlabel(r'$x$', fontsize=12)
ax.legend()

plt.show()
###week05_ex2_end

###week05_ex3_start_py
import matplotlib.pyplot as plt
import numpy as np

# Let's write a convenience function
def f(x):
    # Set coefficients
    a, b, c = -1, 3, 5
    
    # Compute the roots
    sqrt_delta = np.sqrt(b**2 - 4*a*c)
    roots = [(-b - sqrt_delta)/(2 * a), (-b + sqrt_delta)/(2 * a)]
    
    # Return the polynomial and the 2 roots
    return a*x**2 + b*x + c, roots

# Create an x-axis, compute f(x) and both roots
x = np.linspace(-4, 5, 100)
y, roots = f(x)

# Create the figure and axes
fig, ax = plt.subplots(1, 1, figsize=(9, 5))

# Plot the function and the roots
ax.plot(x, y, '--', color='deepskyblue', label=r'$f(x) = -x^2 + 3x + 5$')
ax.plot(x, np.zeros(x.shape[0]), 'k-', label=r'$y = 0$')
ax.plot(roots[0], 0, 'magenta', label='First root', marker='^', markersize=10)
ax.plot(roots[1], 0, 'magenta', label='Second root', marker='^', markersize=10)

# Tidy up the plot
ax.set_xlim([-4, 5])
ax.set_ylim([y[0], 10])
ax.set_xticks(range(-4, 6))
ax.set_xlabel(r'$x$', fontsize=14)
ax.set_ylabel(r'$f(x)$', fontsize=14)
ax.set_title('Polynomial roots', fontsize=14)
ax.legend(loc='lower center')
ax.grid(True)

plt.show()
###week05_ex3_end

###week05_ex4_start_py
def fib_rec(p, q, n):
    '''
    Return the nth element of the (p,q)-Fibonacci sequence.
    
    Input:
        p (int), positive integer, first coefficient
        q (int), positive integer, second coefficient
        n (int), positive integer
        
    Output:
        Fn (int), the nth element of the sequence, defined by
        F(n) = pF(n-1) + qF(n-2).
    '''
    if n == 1 or n == 2:
        return 1
    else:
        return p*fib_rec(p, q, n-1) + q*fib_rec(p, q, n-2)

print(fib_rec(1, 1, 15))
print(fib_rec(6, 4, 10))
print(fib_rec(2, 1, 35))
###week05_ex4_end

###week05_ex5_start_py
# We can redefine our function nearest_PO to also give us the distances
def nearest_PO(residents, POs, metric):
    '''
    Finds the closest post office to all residents.
    
    Input:
        residents (ndarray): array with "pop" rows and 2 columns,
            each row is the (x, y) coordinates of 1 resident.
        POs (ndarray): array with 2 columns, each row is the (x, y)
            coordinates of a post office.
        metric (str): 'manhattan' for Manhattan distance, 'euclid' for Euclidean distance.
    
    Output:
        closest (ndarray): index of the closest post office to each resident,
            in terms of Euclidean distance.
    '''
    if metric == 'manhattan':
        order = 1
    elif metric == 'euclid':
        order = 2
    else:
        print('Enter a valid metric!')
        return
    
    # Prepare a list of lists to store all distances
    distances = []
    
    # Loop over post offices
    for po in POs:
        dist_po = []
        # Loop over residents
        for res in residents:
            # Get the 2-norm of each vector between a resident and a PO
            dist_po.append(np.linalg.norm(res - po, ord=order))
        
        # Add the list of distances for all residents to that PO
        distances.append(dist_po)
    
    # Convert our list of lists to a NumPy array
    distances = np.array(distances).T
    
    # Return the index of the nearest PO, along each row of the array (find the min for each resident)
    closest = np.argmin(distances, axis=1)
    
    # Keep the distances
    pop = residents.shape[0]
    dist_closest = np.zeros(pop)
    for i in range(pop):
        dist_closest[i] = distances[i, closest[i]]
    
    return closest, dist_closest


def average_time(speed, pop):
    '''
    Plot average time to walk to the nearest PO as a function of number of POs.
    
    Input:
        speed (float): walking speed, km/h
        pop (int): population size for the simulation.
    Output: None
    '''
    av_time = np.zeros([30, 2])
    residents = make_residents(pop)
    
    # Loop over number of post offices
    for n in range(1, 31):
        POs = create_POs(n)

        # Get distances to nearest PO with both metrics
        _, dist1 = nearest_PO(residents, POs, 'manhattan')
        _, dist2 = nearest_PO(residents, POs, 'euclid')

        # Get average distance and time
        av_dist1 = np.mean(dist1)
        av_time[n-1, 0] = av_dist1 / speed
        av_dist2 = np.mean(dist2)
        av_time[n-1, 1] = av_dist2 / speed
    
    # Plot the results
    fig, ax = plt.subplots()
    ax.plot(range(1, 31), av_time[:, 0], '-', label='Manhattan distance')
    ax.plot(range(1, 31), av_time[:, 1], '-', label='Euclidean distance')
    ax.legend()
    ax.set_xlabel('Number of post offices')
    ax.set_ylabel('Average walking time (hrs)')
    plt.show()

# This takes a little while to run -- you can start with a smaller population
average_time(5, 1000)
###week05_ex5_end
